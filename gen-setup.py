"""
Given the JSON from gen-info.py (on stdin), produce a Setup file (on stdout).

After changing Modules/Setup*, makesetup needs to be rerun. You can do this by
re-running ./configure, or by invoking makesetup yourself (see the end of
configure.ac).
"""
import json
import sys
import subprocess

# These modules are always omitted
BLACKLIST = {
    # Test modules
    '_testcapi', '_testinternalcapi', '_testbuffer', '_testimportmultiple',
    '_testmultiphase', '_xxtestfuzz',
    # Demos
    'xxlimited',
    # Can't be built via Modules/Setup
    '_sqlite3',  # https://bugs.python.org/issue37839

}


def run_pkg_config(*libs, static=True):
    """
    Queries pkg-config for additional libraries
    """
    cmd = ['pkg-config', '--libs']
    if static:
        cmd += ['--static']
    cmd += list(libs)
    proc = subprocess.run(
        cmd, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL, encoding='utf-8',
    )
    if proc.returncode == 0:
        yield from proc.stdout.strip().split(' ')


def gen_args(mod):
    # Reverses what distutils.extension.read_setup_file() does.
    yield from mod['sources']
    yield from (f'-I{i}' for i in mod['include_dirs'])
    # makesetup can't handle -Dspam=eggs, https://bugs.python.org/issue37839
    yield from (
        f'-D{name}' #if val is None else f'-D{name}={val}'
        for name, val in mod['define_macros']
        if val in (None, 1, "1")
    )
    yield from (f'-U{i}' for i in mod['undef_macros'])
    yield from (
        i if i[:2] in ('-D', '-W') else f'-C{i}'
        for i in mod['extra_compile_args']
    )
    yield from (f'-l{i}' for i in mod['libraries'])
    yield from (f'-L{i}' for i in mod['library_dirs'])
    yield from (f'-R{i}' for i in mod['runtime_library_dirs'])
    assert not mod['extra_link_args']
    for lib in mod['libraries']:
        yield from run_pkg_config(lib)  # One at a time so an error doesn't fail the whole thing


print("# Generated by gen-setup.py")
print("*static*")
print("")
for mod in json.load(sys.stdin):
    if mod['name'] in BLACKLIST:
        continue
    print(f"{mod['name']} {' '.join(gen_args(mod))}")

# Make extra sure about trailing newline
print("# Blank line required")
print("")
